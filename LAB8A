/*
Noah Kelso
3/30/2020
Lab 8a
Write a program that displays a color field, has four scroll bars or sliders. 
The user should be able to manipulate the look of the display field.
Numeric values corresponding to current slider should be displayed and updated
dynamically.
 */
import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.text.Text;
import javafx.scene.control.Slider;
import javafx.scene.paint.Color;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.GridPane;
import javafx.geometry.Pos;
import javafx.geometry.Insets;

public class Kelso_lab8a extends Application {
    Text text = new Text("Show Colors");
    Slider slRed = new Slider();
    Slider slGreen = new Slider();
    Slider slBlue = new Slider();
    Slider slOpacity = new Slider();
    @Override
    public void start(Stage primaryStage) {
        Label redValue = new Label(" ");
        Label greenValue = new Label(" ");
        Label blueValue = new Label(" ");
        Label opacityValue = new Label(" ");
        StackPane paneForText = new StackPane(text);
        paneForText.setPadding(new Insets(20, 10, 5, 10));
        //Slider properties
        slRed.setMin(0.0);
	slRed.setMax(1.0);
	slGreen.setMin(0.0);
	slGreen.setMax(1.0);
	slBlue.setMin(0.0);
	slBlue.setMax(1.0);
	slOpacity.setMin(0.0);
	slOpacity.setMax(1.0);
        // Create listeners
	slRed.valueProperty().addListener(ov -> setColor());
	slGreen.valueProperty().addListener(ov -> setColor());
	slBlue.valueProperty().addListener(ov -> setColor());
	slOpacity.valueProperty().addListener(ov -> setColor());
	slOpacity.setValue(1);
        //Format conversion to bind and get proper output of slider bar values.
        //not for sure if this is the most efficient way, but it was the easiest 
        //I could figure out
        redValue.textProperty().bind(
                Bindings.format(
                        "%.2f",
                        slRed.valueProperty()
                )
        );
        greenValue.textProperty().bind(
                Bindings.format(
                        "%.2f",
                        slGreen.valueProperty()
                )
        );
        blueValue.textProperty().bind(
                Bindings.format(
                        "%.2f",
                        slBlue.valueProperty()
                )
        );
        opacityValue.textProperty().bind(
                Bindings.format(
                        "%.2f",
                        slOpacity.valueProperty()
                )
        );
        
        GridPane paneForSliders = new GridPane();
	paneForSliders.setAlignment(Pos.CENTER);
	paneForSliders.setVgap(5);
	paneForSliders.setHgap(5);
	paneForSliders.add(new Label("Red"), 0, 0);
	paneForSliders.add(slRed, 1, 0);
        paneForSliders.add(redValue, 5, 0);
	paneForSliders.add(new Label("Green"), 0, 1);
	paneForSliders.add(slGreen, 1, 1);
        paneForSliders.add(greenValue, 5, 1);
	paneForSliders.add(new Label("Blue"), 0, 2);
	paneForSliders.add(slBlue, 1, 2);
        paneForSliders.add(blueValue, 5, 2);
	paneForSliders.add(new Label("Opacity"), 0, 3);
	paneForSliders.add(slOpacity, 1, 3);
        paneForSliders.add(opacityValue, 5, 3);
	BorderPane pane = new BorderPane();
	pane.setTop(paneForText);
	pane.setCenter(paneForSliders);
        Scene scene = new Scene(pane, 250, 150);
	primaryStage.setTitle("Kelso_lab8a");
	primaryStage.setScene(scene);
	primaryStage.show();
    }
    private void setColor() {
        text.setFill(new Color(slRed.getValue(), slGreen.getValue(), slBlue.getValue(), slOpacity.getValue()));
    }
    public static void main (String[] args){
        launch(args);
    }
}
